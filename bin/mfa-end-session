#!/bin/bash
# usage: $(mfa-end-session)
# helper script to forcibly end an MFA session with an inline user policy

if ! which jq 2>&1 > /dev/null ; then
    echo "error: Please install 'jq'." > /dev/stderr
    exit 1
fi
if ! which aws 2>&1 > /dev/null ; then
    echo "error: Please install 'awscli'." > /dev/stderr
    exit 1
fi

# if username starts with Unable then no mfa active
username_json="$(aws iam --output json get-user 2>&1)"
if [[ $username_json =~ ^Unable* ]]; then
    echo "error: No MFA token present, or unable to determine username!" > /dev/stderr
    exit 1
# an AccessDenied error occurs if old env variables still exist
elif [[ $username_json =~ AccessDenied ]]; then
    echo "Expired MFA env variables found, cleaning up." > /dev/stderr
    echo unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
    exit 1
else
    username="$(echo $username_json | jq -r '.User.UserName')"
fi

# create temporary file for policy document
policy_base='{"Version": "2012-10-17","Statement": {"Effect": "Deny","NotAction": "IAM:ListMFADevices","Resource": "*","Condition": {"DateLessThan": {"aws:TokenIssueTime": "DATE"}}}}'
date=$(date -u +%Y-%m-%dT%H:%M:%SZ)
tmp_file=$(mktemp /tmp/mfaendsession.XXXXXX)
echo $policy_base | sed -e "s/DATE/$date/" >> $tmp_file

# update the user's inline policy
echo "Updating inline policy" > /dev/stderr
aws iam put-user-policy --user-name $username --policy-name MfaEndSession --policy-document file://$tmp_file

# echo command to unset variables
echo "Clearing session tokens from this shell" > /dev/stderr
echo unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID

# clean up
rm -f $tmp_file
